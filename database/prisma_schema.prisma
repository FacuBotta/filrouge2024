datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  description   String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Session          Session[]
  Account          Account?
  Authenticator    Authenticator[]
  Comments         Comments[]
  Reports          Reports[]          @relation("UserReports")
  Reported         Reports[]          @relation("UserReported")
  Trash            Trash[]
  Ratings          Ratings[]
  EventsCreated           Events[] //this are the events created by the user
  EventsJoined     UserEvents[]     //this are the events joined by the user
  Tasks            Tasks[]
  MessagesSent     Message[]          @relation("SentMessages")
  UserConversation UserConversation[]
  MessageStatus    MessageStatus[]
}

model Tasks {
  id         String   @id @default(cuid())
  userId     String
  content    String
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  order      Int @default(0) // order of the task in the list
  eventId    String?

  Events     Events? @relation(fields: [eventId], references: [id])
  User       User   @relation(fields: [userId], references: [id])
}
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Comments {
  id      String @id @default(cuid())
  userId  String
  eventId String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  event Events @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}

enum ReportStatus {
  pending
  approved
  rejected
}

model Reports {
  id         String       @id @default(cuid())
  reporterId String
  reportedId String
  comment    String
  status     ReportStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User @relation("UserReports", fields: [reporterId], references: [id])
  reported User @relation("UserReported", fields: [reportedId], references: [id])

  @@index([reporterId])
  @@index([reportedId])
}
// TODO agregar la relacion con el report para saber por que esta en trash
model Trash {
  id         String   @id @default(cuid())
  userId     String
  eventId    String
  reason     String // no sera necesario cuando se agregue la relacion con el report
  reportedAt DateTime

  user  User   @relation(fields: [userId], references: [id])
  event Events @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}

model Ratings {
  id      String @id @default(cuid())
  userId  String
  eventId String
  score   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  event Events @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}
model UserEvents {
  userId String
  eventId String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Events @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}
// TODO: agregar el campo isPublic
// TODO: agregar el campo para la imagen
model Events {
  id          String   @id @default(cuid())
  userId      String
  categoryId  String
  title       String
  description String? @db.Text
  eventStart  DateTime
  eventEnd    DateTime
  isPublic    Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  category Category   @relation(fields: [categoryId], references: [id])
  Comments Comments[]
  Trash    Trash[]
  Ratings  Ratings[]
  Tasks    Tasks[]
  participants UserEvents[]

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id          String   @id @default(cuid())
  title       String
  description String @db.Text
  Events      Events[]
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  participants UserConversation[]
}
enum Role {
  CREATOR
  GUEST
}

model UserConversation {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime @default(now())
    role           Role @default(GUEST)
  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}
enum Status {
  UNSEEN
  SEEN
}
model MessageStatus {
  id String @id @default(cuid())
  userId String
  messageId String
  status Status @default(UNSEEN)
  uptadateAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@index([userId])
  @@index([messageId])
}

model Message {
  id             String   @id @default(cuid())
  senderId       String
  conversationId String
  content        String @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  replyToId      String?

  replyTo        Message?  @relation("ReplyTo", fields: [replyToId], references: [id])
  replies        Message[] @relation("ReplyTo")

  sender          User         @relation("SentMessages", fields: [senderId], references: [id])
  conversation    Conversation @relation(fields: [conversationId], references: [id])

  messageStatuses MessageStatus[]
  @@index([senderId])
  @@index([conversationId])
}
