datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  password      String?
  hasPassword   Boolean   @default(false)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  description   String?
  role          String?   @default("user")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  Session          Session[]
  Account          Account?
  Authenticator    Authenticator[]
  CommentsAuthored Comments[]        @relation("CommentAuthor")
  CommentsReceived Comments[]        @relation("CommentRecipient")
  Reports          Reports[]         @relation("UserReports")
  Reported         Reports[]         @relation("UserReported")
  Trash            Trash[]
  Ratings          Ratings[]
  EventsCreated    Events[]          // events created by the user
  EventsJoined     UserEvents[]      // events joined by the user
  Tasks            Tasks[]
  MessagesSent     Message[]         @relation("SentMessages")
  UserConversation UserConversation[]
  MessageStatus    MessageStatus[]
  UserInvitations  UserInvitations[]
}

model Tasks {
  id         String   @id @default(cuid())
  userId     String
  content    String
  completed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  order      Int @default(0) // order of the task in the list
  eventId    String?

  Events     Events? @relation(fields: [eventId], references: [id])
  User       User   @relation(fields: [userId], references: [id])
}
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
model Ratings {
  id        String  @id @default(cuid())
  userId    String
  score     Int
  commentId String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  comment Comments @relation(fields: [commentId], references: [id])
}

model Comments {
  id          String  @id @default(cuid())
  authorId    String
  recipientId String
  content     String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User     @relation("CommentAuthor", fields: [authorId], references: [id])
  recipient   User     @relation("CommentRecipient", fields: [recipientId], references: [id])
  rating      Ratings?
  
  @@index([authorId])
  @@index([recipientId])
}
enum ReportStatus {
  pending
  approved
  rejected
}

model Reports {
  id         String       @id @default(cuid())
  reporterId String
  reportedId String
  comment    String
  status     ReportStatus @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User @relation("UserReports", fields: [reporterId], references: [id])
  reported User @relation("UserReported", fields: [reportedId], references: [id])

  @@index([reporterId])
  @@index([reportedId])
}
model Trash {
  id         String   @id @default(cuid())
  userId     String
  eventId    String
  reportedAt DateTime

  user  User   @relation(fields: [userId], references: [id])
  event Events @relation(fields: [eventId], references: [id])

  @@index([userId])
  @@index([eventId])
}
enum UserInvitationStatus {
  JOINED
  DISJOINED
  WAITING_CREATOR_RESPONSE
  WAITING_PARTICIPANT_RESPONSE
  DECLINED_BY_CREATOR
  DECLINED_BY_PARTICIPANT
}
model UserInvitations {
  id             String @id @default(cuid())
  eventId        String
  participantId  String
  creatorId      String
  conversationId String
  status         UserInvitationStatus @default(WAITING_CREATOR_RESPONSE)
  createdAt      DateTime @default(now())

  user          User          @relation(fields: [participantId], references: [id], onDelete: Cascade)
  event         Events        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  conversation  Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  messages      Message[] @relation("MessageInvitation")

  @@unique([participantId, eventId])
}

model UserEvents {
  userId String
  eventId String
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Events @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId])
}

model Category {
  id          String   @id @default(cuid())
  title       String
  description String @db.Text
  Events      Events[]
}

model Events {
  id             String   @id @default(cuid())
  userId         String
  categoryId     String

  title          String
  description    String? @db.Text
  eventStart     DateTime
  eventEnd       DateTime?
  isPublic       Boolean  @default(false)

  image          String?
  locationUrl    String?
  lat            Float?
  lng            Float?
  vicinity       String?
  formattedAddress String?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation   Conversation?
  user          User        @relation(fields: [userId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
  Trash         Trash[]
  Tasks         Tasks[]
  participants  UserEvents[]
  UserInvitations UserInvitations[]

  @@index([userId])
  @@index([categoryId])
}
model Conversation {
  id             String   @id @default(cuid())
  title          String?
  eventId        String?   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  messages       Message[]
  participants   UserConversation[]
  UserInvitations UserInvitations[]
  event          Events?   @relation(fields: [eventId], references: [id])
}
enum Role {
  CREATOR
  GUEST
}

model UserConversation {
  id             String   @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime @default(now())
  role           Role @default(GUEST)
  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([userId, conversationId])
  @@index([userId])
  @@index([conversationId])
}
enum Status {
  UNSEEN
  SEEN
}
model MessageStatus {
  id String @id @default(cuid())
  userId String
  messageId String
  status Status @default(UNSEEN)
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@index([userId])
  @@index([messageId])
}
// TODO : invitationId as unique make issues...
model Message {
  id             String   @id @default(cuid())
  senderId       String
  conversationId String
  content        String @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  replyToId      String?
  invitationId   String?

  replyTo        Message?  @relation("ReplyTo", fields: [replyToId], references: [id])
  replies        Message[] @relation("ReplyTo")

  sender          User         @relation("SentMessages", fields: [senderId], references: [id])
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  invitation      UserInvitations? @relation("MessageInvitation", fields: [invitationId], references: [id])

  messageStatuses MessageStatus[]

  @@index([senderId])
  @@index([conversationId])
}
